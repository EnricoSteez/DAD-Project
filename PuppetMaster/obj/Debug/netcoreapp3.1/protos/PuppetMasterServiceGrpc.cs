// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: protos/PuppetMasterService.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace Server.protos {
  public static partial class PuppetMasterServices
  {
    static readonly string __ServiceName = "PuppetMasterServices";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::Server.protos.ServerRequest> __Marshaller_ServerRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server.protos.ServerRequest.Parser));
    static readonly grpc::Marshaller<global::Server.protos.ServerResponse> __Marshaller_ServerResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server.protos.ServerResponse.Parser));
    static readonly grpc::Marshaller<global::Server.protos.PartitionRequest> __Marshaller_PartitionRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server.protos.PartitionRequest.Parser));
    static readonly grpc::Marshaller<global::Server.protos.PartitionResponse> __Marshaller_PartitionResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server.protos.PartitionResponse.Parser));
    static readonly grpc::Marshaller<global::Server.protos.StatusRequest> __Marshaller_StatusRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server.protos.StatusRequest.Parser));
    static readonly grpc::Marshaller<global::Server.protos.StatusResponse> __Marshaller_StatusResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server.protos.StatusResponse.Parser));
    static readonly grpc::Marshaller<global::Server.protos.ClientRequest> __Marshaller_ClientRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server.protos.ClientRequest.Parser));
    static readonly grpc::Marshaller<global::Server.protos.ClientResponse> __Marshaller_ClientResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server.protos.ClientResponse.Parser));
    static readonly grpc::Marshaller<global::Server.protos.CrashRequest> __Marshaller_CrashRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server.protos.CrashRequest.Parser));
    static readonly grpc::Marshaller<global::Server.protos.CrashResponse> __Marshaller_CrashResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server.protos.CrashResponse.Parser));
    static readonly grpc::Marshaller<global::Server.protos.FreezeRequest> __Marshaller_FreezeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server.protos.FreezeRequest.Parser));
    static readonly grpc::Marshaller<global::Server.protos.FreezeResponse> __Marshaller_FreezeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server.protos.FreezeResponse.Parser));
    static readonly grpc::Marshaller<global::Server.protos.UnfreezeRequest> __Marshaller_UnfreezeRequest = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server.protos.UnfreezeRequest.Parser));
    static readonly grpc::Marshaller<global::Server.protos.UnfreezeResponse> __Marshaller_UnfreezeResponse = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::Server.protos.UnfreezeResponse.Parser));

    static readonly grpc::Method<global::Server.protos.ServerRequest, global::Server.protos.ServerResponse> __Method_Server = new grpc::Method<global::Server.protos.ServerRequest, global::Server.protos.ServerResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Server",
        __Marshaller_ServerRequest,
        __Marshaller_ServerResponse);

    static readonly grpc::Method<global::Server.protos.PartitionRequest, global::Server.protos.PartitionResponse> __Method_Partition = new grpc::Method<global::Server.protos.PartitionRequest, global::Server.protos.PartitionResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Partition",
        __Marshaller_PartitionRequest,
        __Marshaller_PartitionResponse);

    static readonly grpc::Method<global::Server.protos.StatusRequest, global::Server.protos.StatusResponse> __Method_Status = new grpc::Method<global::Server.protos.StatusRequest, global::Server.protos.StatusResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Status",
        __Marshaller_StatusRequest,
        __Marshaller_StatusResponse);

    static readonly grpc::Method<global::Server.protos.ClientRequest, global::Server.protos.ClientResponse> __Method_Client = new grpc::Method<global::Server.protos.ClientRequest, global::Server.protos.ClientResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Client",
        __Marshaller_ClientRequest,
        __Marshaller_ClientResponse);

    static readonly grpc::Method<global::Server.protos.CrashRequest, global::Server.protos.CrashResponse> __Method_Crash = new grpc::Method<global::Server.protos.CrashRequest, global::Server.protos.CrashResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Crash",
        __Marshaller_CrashRequest,
        __Marshaller_CrashResponse);

    static readonly grpc::Method<global::Server.protos.FreezeRequest, global::Server.protos.FreezeResponse> __Method_Freeze = new grpc::Method<global::Server.protos.FreezeRequest, global::Server.protos.FreezeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Freeze",
        __Marshaller_FreezeRequest,
        __Marshaller_FreezeResponse);

    static readonly grpc::Method<global::Server.protos.UnfreezeRequest, global::Server.protos.UnfreezeResponse> __Method_Unfreeze = new grpc::Method<global::Server.protos.UnfreezeRequest, global::Server.protos.UnfreezeResponse>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Unfreeze",
        __Marshaller_UnfreezeRequest,
        __Marshaller_UnfreezeResponse);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::Server.protos.PuppetMasterServiceReflection.Descriptor.Services[0]; }
    }

    /// <summary>Client for PuppetMasterServices</summary>
    public partial class PuppetMasterServicesClient : grpc::ClientBase<PuppetMasterServicesClient>
    {
      /// <summary>Creates a new client for PuppetMasterServices</summary>
      /// <param name="channel">The channel to use to make remote calls.</param>
      public PuppetMasterServicesClient(grpc::ChannelBase channel) : base(channel)
      {
      }
      /// <summary>Creates a new client for PuppetMasterServices that uses a custom <c>CallInvoker</c>.</summary>
      /// <param name="callInvoker">The callInvoker to use to make remote calls.</param>
      public PuppetMasterServicesClient(grpc::CallInvoker callInvoker) : base(callInvoker)
      {
      }
      /// <summary>Protected parameterless constructor to allow creation of test doubles.</summary>
      protected PuppetMasterServicesClient() : base()
      {
      }
      /// <summary>Protected constructor to allow creation of configured clients.</summary>
      /// <param name="configuration">The client configuration.</param>
      protected PuppetMasterServicesClient(ClientBaseConfiguration configuration) : base(configuration)
      {
      }

      public virtual global::Server.protos.ServerResponse Server(global::Server.protos.ServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Server(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Server.protos.ServerResponse Server(global::Server.protos.ServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Server, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Server.protos.ServerResponse> ServerAsync(global::Server.protos.ServerRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ServerAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Server.protos.ServerResponse> ServerAsync(global::Server.protos.ServerRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Server, null, options, request);
      }
      public virtual global::Server.protos.PartitionResponse Partition(global::Server.protos.PartitionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Partition(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Server.protos.PartitionResponse Partition(global::Server.protos.PartitionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Partition, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Server.protos.PartitionResponse> PartitionAsync(global::Server.protos.PartitionRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return PartitionAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Server.protos.PartitionResponse> PartitionAsync(global::Server.protos.PartitionRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Partition, null, options, request);
      }
      public virtual global::Server.protos.StatusResponse Status(global::Server.protos.StatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Status(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Server.protos.StatusResponse Status(global::Server.protos.StatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Status, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Server.protos.StatusResponse> StatusAsync(global::Server.protos.StatusRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return StatusAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Server.protos.StatusResponse> StatusAsync(global::Server.protos.StatusRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Status, null, options, request);
      }
      public virtual global::Server.protos.ClientResponse Client(global::Server.protos.ClientRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Client(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Server.protos.ClientResponse Client(global::Server.protos.ClientRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Client, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Server.protos.ClientResponse> ClientAsync(global::Server.protos.ClientRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return ClientAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Server.protos.ClientResponse> ClientAsync(global::Server.protos.ClientRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Client, null, options, request);
      }
      public virtual global::Server.protos.CrashResponse Crash(global::Server.protos.CrashRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Crash(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Server.protos.CrashResponse Crash(global::Server.protos.CrashRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Crash, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Server.protos.CrashResponse> CrashAsync(global::Server.protos.CrashRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return CrashAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Server.protos.CrashResponse> CrashAsync(global::Server.protos.CrashRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Crash, null, options, request);
      }
      public virtual global::Server.protos.FreezeResponse Freeze(global::Server.protos.FreezeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Freeze(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Server.protos.FreezeResponse Freeze(global::Server.protos.FreezeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Freeze, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Server.protos.FreezeResponse> FreezeAsync(global::Server.protos.FreezeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return FreezeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Server.protos.FreezeResponse> FreezeAsync(global::Server.protos.FreezeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Freeze, null, options, request);
      }
      public virtual global::Server.protos.UnfreezeResponse Unfreeze(global::Server.protos.UnfreezeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return Unfreeze(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual global::Server.protos.UnfreezeResponse Unfreeze(global::Server.protos.UnfreezeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.BlockingUnaryCall(__Method_Unfreeze, null, options, request);
      }
      public virtual grpc::AsyncUnaryCall<global::Server.protos.UnfreezeResponse> UnfreezeAsync(global::Server.protos.UnfreezeRequest request, grpc::Metadata headers = null, global::System.DateTime? deadline = null, global::System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
      {
        return UnfreezeAsync(request, new grpc::CallOptions(headers, deadline, cancellationToken));
      }
      public virtual grpc::AsyncUnaryCall<global::Server.protos.UnfreezeResponse> UnfreezeAsync(global::Server.protos.UnfreezeRequest request, grpc::CallOptions options)
      {
        return CallInvoker.AsyncUnaryCall(__Method_Unfreeze, null, options, request);
      }
      /// <summary>Creates a new instance of client from given <c>ClientBaseConfiguration</c>.</summary>
      protected override PuppetMasterServicesClient NewInstance(ClientBaseConfiguration configuration)
      {
        return new PuppetMasterServicesClient(configuration);
      }
    }

  }
}
#endregion
